#pragma kernel Update
#pragma kernel Init
#define THREAD_COUNT 256
#include "common.hlsli"


RWStructuredBuffer<Particle> particles;
AppendStructuredBuffer<uint> pools;
ConsumeStructuredBuffer<uint> alive;

float3 transportPosition;
float3 transportForward;
float2 time; //x = delta time, y = elapsed time


[numthreads(THREAD_COUNT, 1, 1)]
void Init(uint3 id : SV_DispatchThreadID)
{
    particles[id.x].color = float4(1.0f, 1.0f, 1.0f, 1.0f);
    particles[id.x].alive = false;
    particles[id.x].size = 1.0f;
    pools.Append(id.x);
}

[numthreads(1, 1, 1)]
void Emit(uint3 svid : SV_DispatchThreadID)
{
    uint id = alive.Consume();
    Particle p = particles[id];
    p.alive = true;
    particles[id].position = transportPosition;
    particles[id].forward = transportForward;
    particles[id].data.x = 0.0f;
    particles[id].data.y = 20.0f;
    particles[id] = p;
}

[numthreads(THREAD_COUNT, 1, 1)]
void Update(uint3 id : SV_DispatchThreadID)
{
    Particle p = particles[id.x];
    if (p.alive)
    {
        if (p.data.x + time.x >= p.data.y)
        {
            p.alive = false;
            pools.Append(id.x);
            p.data.x += time.x;
        }
        else
        {

            p.position += float3(0,1,0);
        }
    }
    particles[id.x] = p;
}

