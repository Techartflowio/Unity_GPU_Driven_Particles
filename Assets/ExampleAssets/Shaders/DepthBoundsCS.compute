#pragma kernel CSMain

float2 gRcpBufferDim;
Texture2D<float> DepthTexture;
RWTexture2D<float> mipmap8;
RWTexture2D<float> mipmap16;
RWTexture2D<float> mipmap32;
groupshared uint gs_Buffer[128];
SamplerState my_point_clamp_sampler;

void Max4(uint This, uint Dx)
{
    uint MM1 = gs_Buffer[This + 1 * Dx];
    uint MM2 = gs_Buffer[This + 8 * Dx];
    uint MM3 = gs_Buffer[This + 9 * Dx];
    GroupMemoryBarrierWithGroupSync();
    InterlockedMax(gs_Buffer[This], max(MM1, max(MM2, MM3)));
    GroupMemoryBarrierWithGroupSync();
}
uint PackMinMax(uint This)
{
    float Min = asfloat(~gs_Buffer[This + 64]);
    float Max = asfloat(gs_Buffer[This]);
    return f32tof16(Max) << 16 | f32tof16(saturate(Min - 0.001));
}

[numthreads(8,8,1)]
void CSMain(uint3 Gid : SV_GroupID, uint GI : SV_GroupIndex, uint3 DTid : SV_DispatchThreadID)
{


    float2 UV1 = (DTid.xy * 4 + 1) * gRcpBufferDim;
    float2 UV2 = UV1 + float2(2, 0) * gRcpBufferDim;
    float2 UV3 = UV1 + float2(0, 2) * gRcpBufferDim;
    float2 UV4 = UV1 + float2(2, 2) * gRcpBufferDim;
    float4 ZQuad1 = DepthTexture.Gather(my_point_clamp_sampler, UV1);
    float4 ZQuad2 = DepthTexture.Gather(my_point_clamp_sampler, UV2);
    float4 ZQuad3 = DepthTexture.Gather(my_point_clamp_sampler, UV3);
    float4 ZQuad4 = DepthTexture.Gather(my_point_clamp_sampler, UV4);

    float4 MaxQuad = max(max(ZQuad1, ZQuad2), max(ZQuad3, ZQuad4));
    float4 MinQuad = min(min(ZQuad1, ZQuad2), min(ZQuad3, ZQuad4));

    float maxZ = max(max(MaxQuad.x, MaxQuad.y), max(MaxQuad.z, MaxQuad.w));
    float minZ = min(min(MinQuad.x, MinQuad.y), min(MinQuad.z, MinQuad.w));
    gs_Buffer[GI] = asuint(maxZ);
    gs_Buffer[GI + 64] = ~asuint(minZ);
    GroupMemoryBarrierWithGroupSync();  
    const uint This = GI * 2;
    Max4(This, 1);
    if ((This & 0x49) == 0)
    {
        uint2 SubTile = uint2(This >> 1, This >> 4) & 3;
        mipmap8[Gid.xy * 4 + SubTile] = PackMinMax(This);
    }
    Max4(This, 2);

    // if (X % 4 == 0 && Y % 4 == 0 && Y < 8)
    if ((This & 0x5B) == 0)
    {
        uint2 SubTile = uint2(This >> 2, This >> 5) & 1;
        mipmap16[Gid.xy * 2 + SubTile] = PackMinMax(This);
    }

    Max4(This, 4);

    if (This == 0)
        mipmap32[Gid.xy] = PackMinMax(This);
}
