// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel ParticleSort
#pragma kernel InnerSort
#pragma kernel OuterSort

#include "common.hlsli"

StructuredBuffer<Particle> inputs;
RWByteAddressBuffer drawArgsBuffer;
ByteAddressBuffer vertexCounterBuffer;
RWStructuredBuffer<uint> indexBuffer;
Texture2D<float> depthTexture;
SamplerState my_point_clamp_sampler;
int depthTexture_size;
int max_level;
float cotangent;
float aspect;
bool enableHizCulling;
float2 RTSize;
matrix gViewProj;
#define SIZE 2048
#define HALFSIZE SIZE/2
#define TOPMOST 0xffffffff
groupshared uint SortKeys[SIZE];
int j;
int k;


bool CullOut(Particle particle)
{

    //FrustomOut
    const float4 HPos = mul(gViewProj, float4(particle.position, 1));
    float Height = particle.size * cotangent;
    float Width = Height * aspect;
    float3 Extent = abs(HPos.xyz) - float3(Width, Height, 0);
    Extent /= HPos.w;
    if (abs(Extent.x) > 1 || abs(Extent.y) > 1 || HPos.z > 1 || HPos.z < 0)// direct x clip space
        return true;
    if (!enableHizCulling)
        return false;
    //Hiz culling
    float2 halfParticleSize = float2(Width, Height) / HPos.w*0.5f ;
    float2 xy = HPos.xy*0.5f/ HPos.w  + 0.5f;
    int2 size = halfParticleSize.xy * RTSize.xy;
    float mip = ceil(log2(max(size.x, size.y)));
    mip = clamp(mip, 0, max_level);
    float4 depth = { depthTexture.SampleLevel(my_point_clamp_sampler, xy + halfParticleSize.xy * float2(1.0f,1.0f), mip),
                         depthTexture.SampleLevel(my_point_clamp_sampler, xy + halfParticleSize.xy * float2(1.0f,-1.0f), mip),
                         depthTexture.SampleLevel(my_point_clamp_sampler, xy + halfParticleSize.xy * float2(-1.0f,1.0f), mip),
                         depthTexture.SampleLevel(my_point_clamp_sampler, xy + halfParticleSize.xy * float2(-1.0f,-1.0f), mip) };
    float maxDepth = min(min(min(depth.x, depth.y), depth.z), depth.w);
    float clipZ = HPos.z / HPos.w;
    
    if (maxDepth - clipZ > 0)  // farther = smaller Reserved Z
        return true;
    return false;
}


void LoadKeyIndexPair(uint index, uint particleNum)
{
    SortKeys[index & 2047] = index < particleNum ? indexBuffer[index] : TOPMOST;
}

void PackSortKey(uint GroupStart, uint Offset, uint particleNum)
{
    if (GroupStart + Offset > particleNum)
    {
        SortKeys[Offset] = TOPMOST;
        return;
    }
    uint VertexIdx = GroupStart + Offset;
    Particle particle = inputs[VertexIdx];
    if (particle.alive == 0.0f)
    {
        SortKeys[Offset] = TOPMOST;
        return;
    }
    if(!CullOut(particle))
    {
        float4 HPos = mul(gViewProj, float4(particle.position, 1));
        float Depth = HPos.z / HPos.w;
        SortKeys[Offset] = f32tof16(Depth) << 16 | VertexIdx;;
        drawArgsBuffer.InterlockedAdd(4, 1);
    }
    else
    {
        SortKeys[Offset] = TOPMOST;
    }
   

}
[numthreads(HALFSIZE, 1, 1)]
void ParticleSort(uint3 DTid : SV_DispatchThreadID, uint3 Gid : SV_GroupID, uint GI : SV_GroupIndex)
{
    uint particleNum = vertexCounterBuffer.Load(0);
    uint GroupStart = Gid.x *2048;;
    if (GroupStart > particleNum)
    {
        indexBuffer[GroupStart + GI] = TOPMOST;
        indexBuffer[GroupStart + GI + HALFSIZE] = TOPMOST;
        return;
    }
    PackSortKey(GroupStart, GI, particleNum);
    PackSortKey(GroupStart, GI + HALFSIZE, particleNum);
    GroupMemoryBarrierWithGroupSync();
    [unroll]
    for (uint k = 2; k <= SIZE; k *= 2)
    {
        [unroll]
        for (uint j = k / 2; j > 0; j /= 2)
        {
            uint Index1 = InsertZeroBit(GI, j);
            uint Index2 = Index1 ^ (k == j * 2 ? k - 1 : j);

            uint A = SortKeys[Index1];
            uint B = SortKeys[Index2];

            if (A > B)
            {
                SortKeys[Index1] = B;
                SortKeys[Index2] = A;
            }

            GroupMemoryBarrierWithGroupSync();
        }
    }
   
    indexBuffer[GroupStart + GI] = SortKeys[GI];
    indexBuffer[GroupStart + GI + HALFSIZE] =  SortKeys[GI + HALFSIZE] ;
}


[numthreads(HALFSIZE, 1, 1)]
void InnerSort(uint3 DTid : SV_DispatchThreadID, uint3 Gid : SV_GroupID, uint GI : SV_GroupIndex)
{
    uint particleNum = vertexCounterBuffer.Load(0);
    const uint GroupStart = Gid.x * 2048;
    LoadKeyIndexPair(GroupStart + GI, particleNum);
    LoadKeyIndexPair(GroupStart + GI + 1024, particleNum);
    GroupMemoryBarrierWithGroupSync();
    [unroll]
    for (uint j = 1024; j > 0; j /= 2)
    {
        uint Index1 = InsertZeroBit(GI, j);
        uint Index2 = Index1 ^ j;

        uint A = SortKeys[Index1];
        uint B = SortKeys[Index2];

        if (A > B)
        {
            SortKeys[Index1] = B;
            SortKeys[Index2] = A;
        }

        GroupMemoryBarrierWithGroupSync();
    }

    indexBuffer[GroupStart + GI] = SortKeys[GI];
    indexBuffer[GroupStart + GI + HALFSIZE] = SortKeys[GI + HALFSIZE];
}

[numthreads(HALFSIZE, 1, 1)]
void OuterSort(uint3 DTid : SV_DispatchThreadID, uint3 Gid : SV_GroupID, uint GI : SV_GroupIndex)
{
    uint particleNum = vertexCounterBuffer.Load(0);
    uint Index2 = InsertOneBit((uint)DTid.x, (uint)j);
    uint Index1 = Index2 ^ (k == 2 * j ? k - 1 : j);
    if (Index2 >= particleNum)
        return;
    uint A = indexBuffer[Index1];
    uint B = indexBuffer[Index2];
    if (A > B)
    {
        indexBuffer[Index1] = B;
        indexBuffer[Index2] = A;
    }
}

